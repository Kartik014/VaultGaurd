name: Build and Deploy to EC2

on:
  push:
    branches: [master]

jobs:
  checkout:
    name: 🔄 Checkout Source
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

  build:
    name: 🛠️ Build Project
    runs-on: ubuntu-latest
    needs: checkout

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build JAR with Gradle
        run: ./gradlew clean build -x test

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t vaultguard-app:latest .

      - name: Save Docker image as archive
        run: docker save vaultguard-app:latest | gzip > vaultguard-app.tar.gz

      - name: Upload Docker archive
        uses: actions/upload-artifact@v4
        with:
          name: docker-archive
          path: vaultguard-app.tar.gz

  prepare-config:
    name: ⚙️ Prepare Config Files
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: Create .env from base64 secret
        run: |
          if [ -z "${{ secrets.ENV_FILE }}" ]; then
            echo "Error: ENV_FILE secret is missing or empty"
            exit 1
          fi
          echo "${{ secrets.ENV_FILE }}" | base64 -d > .env
          echo "Created .env file with size: $(wc -c < .env)"
          head -n 5 .env
          [ -s .env ] || (echo "Error: .env is empty after decoding" && exit 1)

      - name: Create docker-compose.yml from base64 secret
        run: |
          echo "${{ secrets.DOCKER_COMPOSE_YML }}" | base64 -d > docker-compose.yml
          [ -s docker-compose.yml ] || (echo "Error: docker-compose.yml is empty" && exit 1)

      - name: Upload config files
        uses: actions/upload-artifact@v4
        with:
          name: config-files
          path: |
            ./.env
            ./docker-compose.yml

  transfer:
    name: 📦 Transfer Files to EC2
    runs-on: ubuntu-latest
    needs: [ build, prepare-config ]
    environment: production

    steps:
      - name: Download Docker archive
        uses: actions/download-artifact@v4
        with:
          name: docker-archive
          path: .

      - name: Download Config Files
        uses: actions/download-artifact@v4
        with:
          name: config-files
          path: .

      - name: Verify downloaded artifacts
        run: |
          echo "Files in directory:"
          ls -la
          echo "Checking file sizes:"
          [ -s vaultguard-app.tar.gz ] || (echo "Missing vaultguard-app.tar.gz" && exit 1)
          [ -s .env ] || (echo "Missing .env" && exit 1)
          [ -s docker-compose.yml ] || (echo "Missing docker-compose.yml" && exit 1)

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          source: "vaultguard-app.tar.gz,.env,docker-compose.yml"
          target: /home/ubuntu/deploy

  deploy:
    name: 🚀 Deploy on EC2
    runs-on: ubuntu-latest
    needs: transfer
    environment: production

    steps:
      - name: SSH into EC2 and deploy container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/deploy
            docker rm -f vaultguard-app || true
            gunzip -c vaultguard-app.tar.gz | docker load
            docker-compose down
            docker-compose up -d
